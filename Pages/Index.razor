@page "/"

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RecipeService recipeService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavigationManager


<AuthorizeView>
    <Authorized>
        <PageTitle>ReciPlan</PageTitle>

<h1>Your Recipes</h1>
@if (recipes == null || recipes.Count == 0)

{

  <h3>Add your First Recipe</h3>

  <RecipeForm></RecipeForm>

}
else
{

  <button class="btn btn-primary" @onclick="@Toggle">Add a New Recipe</button>
  <div hidden="@HideForm">
    <RecipeForm />
  </div>

  <div class="d-flex flex-wrap">
  @foreach (var recipe in recipes)
    {
      <RecipeCard imageUrl=@recipe.Image recipeName=@recipe.Title recipeDescription=@recipe.Description
    recipeId=@recipe.RecipeId>
      </RecipeCard>
    }
  </div>
}
    </Authorized>
    <NotAuthorized>
      <h2>What's the plan?</h2>
      <img src="/images/ReciPlan.png" class="img-fluid">
      <br>
      <br>
      <h4>Please <a href="Identity/Account/Login" class="link-secondary">log in</a>  to start making your plan.</h4>
      <hr>
<br>
<br>
<br>
<br>
        <p>partnered with Fruitigo, Food2U, and PEDrink</p>
        <p>sponsored by Blend The Lines</p>
    </NotAuthorized>
</AuthorizeView>

@code {
  int? recipeId;
  string? title;
  string? description;
  string? image;
  string? steps;
  string? ingredients;
  string? userId;

  List<Recipe>? recipes;
  [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    base.OnInitialized();

    var user = (await authenticationStateTask).User;
    if (!user.Identity.IsAuthenticated)
    {
      <!-- NavigationManager.NavigateTo("Identity/Account/login", true); -->
    }

    await getUserId();
    await load();


  }
  async Task<string> getUserId()
  {
    var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
    userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    return userId;
  }
  protected async Task load()
  {
    recipes = await recipeService.GetRecipesAsync(userId);
  }

  protected async Task AddRecipe()
  {
    // create new object to insert
    Recipe r = new Recipe()
    {
      Id = userId,
      Title = title,
      Description = description,
      Image = image,
      Steps = steps,
      Ingredients = ingredients
    };
    // call the function that will add recipe to db

    await recipeService.InsertRecipeAsync(r);

  }

  private bool HideForm { get; set; } = true;
  private void Toggle()
  {
    HideForm = !HideForm;
  }

}
