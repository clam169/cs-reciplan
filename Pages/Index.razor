@page "/"
@using Microsoft.AspNetCore.Mvc
@using RecipeApp.Components
@using RecipeApp.Data
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RecipeService recipeService
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>ReciPlan</PageTitle>
@* @if (SignInManager.IsSignedIn(User))
  {
  <li class="nav-item">
  <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello
  @User.Identity?.Name!</a>
  </li>
  <li class="nav-item">
  <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="/" method="post">
  <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
  </form>
  </li>
  } *@

<h1>Home Page</h1>
@if (recipes == null || recipes.Count == 0)
@* {
  <p><em>Loading...</em></p>
  }
  else if (recipes.Count == 0) *@
{

  <h3>Add your First Recipe</h3>

  <RecipeForm userId=@userId></RecipeForm>

}
else
{

  <button class="btn btn-primary" @onclick="@Toggle">Add a New Recipe</button>
  <div hidden="@HideForm">
    <RecipeForm />
  </div>

  <p>Here are your recipes from the db</p>
  <div class="d-flex flex-wrap justify-content-around">
  @foreach (var recipe in recipes)
    {
      <RecipeCard imageUrl=@recipe.Image recipeName=@recipe.Title recipeDescription=@recipe.Description
    recipeId=@recipe.RecipeId>
      </RecipeCard>
    }
  </div>
}



@code {
  int? recipeId;
  string? title;
  string? description;
  string? image;
  string? steps;
  string? ingredients;
  string? userId;

  List<Recipe>? recipes;




  [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await load();
    await getUserId();
  }
  async Task<string> getUserId()
  {
    var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
    userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    return userId;
  }
  protected async Task load()
  {
    recipes = await recipeService.GetRecipesAsync();
  }

  protected async Task AddRecipe()
  {
    Console.WriteLine(userId);
    // create new object to insert
    Recipe r = new Recipe()
    {
      Id = userId,
      Title = title,
      Description = description,
      Image = image,
      Steps = steps,
      Ingredients = ingredients
    };
    // call the function that will add recipe to db

    await recipeService.InsertRecipeAsync(r);

  }

  private bool HideForm { get; set; } = true;
  private void Toggle()
  {
    HideForm = !HideForm;
  }
  @* public async Task<IActionResult> GetId()
    {
    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier) // will give the user's userId
    var userName = User.FindFirstValue(ClaimTypes.Name) // will give the user's userName

    ApplicationUser applicationUser = await _userManager.GetUserAsync(User);
    string userEmail = applicationUser?.Email; // will give the user's Email
    } *@
}
