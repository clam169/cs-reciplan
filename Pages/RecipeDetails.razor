@page "/recipedetails/{recipeId:int}"

@attribute [Authorize]
@inject RecipeService recipeService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider


<PageTitle>Recipe Details Page</PageTitle>



@if (recipe == null)
{
    <h1>WAITING</h1>
}
else
{
    <main style="max-width: 1000px;">
    <div class="d-flex bd-highlight mb-3">
        <button @onclick="@Toggle" class="btn btn-secondary p-2 bd-highlight">Edit</button>
        <button @onclick="@ToggleDelete" class="btn btn-danger p-2 bd-highlight">Delete</button>
        <button class="btn btn-primary ms-auto p-2 bd-highlight" @onclick="@ToggleMealPlan">Add to Meal Plan +</button>
    </div>
    <div class="d-flex justify-content-end">
        <div hidden="@HideForm">
            <CascadingValue Value=recipe>
                <AddToDayForm />
            </CascadingValue>
        </div>
    </div>
    <div hidden="@ShowDelete">
        <h4>Are you sure you want to delete @recipe.Title? This cannot be undone.</h4>
        <button @onclick="@DeleteRecipe" class="btn btn-danger">Yes, delete.</button>
        <button @onclick="@ToggleDelete" class="btn btn-success">No, do not delete.</button>
    </div>


    <div hidden="@ShowRecipe">

        <div style="width: 100%">
            <h1>Recipe Details for @recipe.Title</h1>
            <div class="d-flex flex-wrap flex-row justify-content-between"
                style="margin-right:10rem; width:100%;margin:auto">
                <div class="flex-fill flex-grow-1 inline-block" style="max-width:60%">
                    <h3>Description:</h3>
                    <p> @recipe.Description
                    </p>
                    <br>
                    <h3>List of Ingredients:</h3>
                    <p> @recipe.Ingredients</p>
                    <br>
                    <h3>Steps:</h3>
                    <p> @recipe.Steps </p>
                    <br>
                </div>
                <div class="inline flex-shrink-1" style="text-align:center">
                    <img src=" @recipe.Image" alt="pic of food" style="max-width:500px; height:600px; object-fit:cover">
                </div>
            </div>
        </div>


    </div>
    <div hidden="@ShowEdit">
        <div class="form-group">
            <h1>Edit Details for:<br>
                <input type="text" @bind="@title" class="form-control"><br>
            </h1>
            <p>Description:<br>
                <input type="text" @bind="@description" class="form-control">
            </p>
            <br>
            <p>List of Ingredients:<br>
                <input type="text" @bind="@ingredients" class="form-control">
            </p>
            <br>
            <p>Steps: <br>
                <textarea class="form-control" @bind="@steps" @bind:event="oninput" style="height: 225px;"></textarea>
            </p>
            <br>
            <p>Image URL: <br>
                <input type="text" @bind="@image" class="form-control">
            </p>
            <button @onclick="@EditRecipe" class="btn btn-success">Save</button>
            <button @onclick="@Toggle" class="btn btn-warning">Cancel Edit</button>
        </div>
    </div>
</main>
}
@code {
    string? title;
    string? description;
    string? image;
    string? steps;
    string? ingredients;
    string? userId;


    Recipe? recipe;
    Recipe r;

    async Task<string> getUserId()
    {
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return userId;
    }

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("Identity/Account/login", true);
        }

        await getUserId();
        await load();


    }


    protected async Task load()
    {
        recipe = await recipeService.GetRecipeByIdAsync(recipeId);
        title = recipe.Title;
        description = recipe.Description;
        image = recipe.Image;
        steps = recipe.Steps;
        ingredients = recipe.Ingredients;
    }

    protected async Task EditRecipe()
    {
        Recipe r = new Recipe()
        {

            Id = userId,
            Title = title,
            Description = description,
            Image = image,
            Steps = steps,
            Ingredients = ingredients

        };
        Console.WriteLine(r);
        await recipeService.UpdateRecipeAsync(recipeId, r);
        Toggle();
    }
    private bool ShowEdit { get; set; } = true;
    private bool ShowRecipe { get; set; } = false;
    private bool ShowDelete { get; set; } = true;
    private void Toggle()
    {
        ShowEdit = !ShowEdit;
        ShowRecipe = !ShowRecipe;
    }
    private void ToggleDelete()
    {
        ShowDelete = !ShowDelete;
    }
    protected async Task DeleteRecipe()
    {
        await recipeService.DeleteRecipeAsync(recipeId);
        NavigationManager.NavigateTo("/");
    }


    [Parameter]
    public int recipeId { get; set; }

    private bool HideForm { get; set; } = true;
    private void ToggleMealPlan()
    {
        HideForm = !HideForm;
    }


}
